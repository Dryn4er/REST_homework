name: REST_homework

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        ports:
          - 5432:5432
        env:
          SECRET_KEY: 'secret-key'
          POSTGRES_DB: mytestdb
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    env:
      SECRET_KEY: 'secret-key'
      POSTGRES_HOST: 'localhost'
      POSTGRES_PORT: 5432
      POSTGRES_DB: mytestdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run migrations
      run: python manage.py migrate

    - name: Run tests
      run: python manage.py test

  deploy:
    runs-on: ubuntu-latest
    needs: test
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      HOST_KEY: ${{ secrets.HOST_KEY }}


    steps:
      - name: Setup SSH key and known_hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Создать директорию на сервере
        run: |
          ssh -tt -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << EOF
          set -e
          echo "Создаю директорию: ${{ secrets.DEPLOY_DIR }}"
          sudo mkdir -p "${{ secrets.DEPLOY_DIR }}"
          EOF

      - name: Копировать файлы проекта на сервер
        run: |
          rsync -avz --no-times --exclude '__pycache__' . ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:${{ secrets.DEPLOY_DIR }}

      - name: Установить зависимости на сервере
        run: |
          ssh -tt -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << EOF
          set -e
          set -x
          DEPLOY_DIR="${{ secrets.DEPLOY_DIR }}"
          cd "\$DEPLOY_DIR"
          if [ ! -d "venv" ]; then
            python3 -m venv venv
          fi
          source venv/bin/activate && pip install -r requirements.txt
          EOF

      - name: Выполнить миграции базы данных
        run: |
          ssh -tt -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << EOF
          set -e
          set -x
          cd "${{ secrets.DEPLOY_DIR }}"
          source venv/bin/activate
          export SECRET_KEY=${{ secrets.SECRET_KEY }}
          python manage.py migrate
          EOF

      - name: Собрать статические файлы
        run: |
          ssh -tt -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << EOF
          set -e
          set -x
          cd "${{ secrets.DEPLOY_DIR }}"
          source venv/bin/activate
          export SECRET_KEY=${{ secrets.SECRET_KEY }}
          python manage.py collectstatic --noinput
          EOF

      - name: Перезапустить приложение (например, systemd)
        run: |
          ssh -tt -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << EOF
          set -e
          set -x
            sudo systemctl restart myapp.service
          EOF